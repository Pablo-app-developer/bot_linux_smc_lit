#!/usr/bin/env python3
"""
VERIFICADOR DEL SISTEMA SMC-LIT
==============================
Verifica que todo est√© correctamente configurado
"""

import os
import sys
import importlib
from datetime import datetime

def imprimir_banner():
    """Banner del verificador"""
    print("=" * 60)
    print("üîç VERIFICADOR DEL SISTEMA SMC-LIT")
    print("=" * 60)
    print("‚úÖ Verificando configuraci√≥n completa...")
    print("=" * 60)

def verificar_archivos_principales():
    """Verifica que todos los archivos principales existan"""
    print("\nüìÅ VERIFICANDO ARCHIVOS PRINCIPALES:")
    
    archivos_requeridos = [
        'config_seguro.py',
        'iniciar_bot_seguro.py', 
        'configurar_credenciales.py',
        'deploy_a_vps.py',
        'main.py',
        'start_bot.py',
        'requirements.txt',
        'INSTRUCCIONES_COMPLETAS.md'
    ]
    
    todos_ok = True
    for archivo in archivos_requeridos:
        if os.path.exists(archivo):
            print(f"‚úÖ {archivo}")
        else:
            print(f"‚ùå {archivo} - FALTANTE")
            todos_ok = False
    
    return todos_ok

def verificar_directorio_src():
    """Verifica el directorio src"""
    print("\nüìÇ VERIFICANDO DIRECTORIO SRC:")
    
    if not os.path.exists('src'):
        print("‚ùå Directorio src/ no encontrado")
        return False
    
    archivos_src = [
        'src/mt5_connector.py',
        'src/mt5_trader.py',
        'src/strategy.py',
        'src/features.py',
        'src/mt5_simulator.py'
    ]
    
    todos_ok = True
    for archivo in archivos_src:
        if os.path.exists(archivo):
            print(f"‚úÖ {archivo}")
        else:
            print(f"‚ùå {archivo} - FALTANTE")
            todos_ok = False
    
    return todos_ok

def verificar_dependencias():
    """Verifica dependencias Python"""
    print("\nüêç VERIFICANDO DEPENDENCIAS PYTHON:")
    
    dependencias = [
        'pandas',
        'numpy', 
        'sklearn',
        'xgboost',
        'matplotlib',
        'seaborn',
        'joblib'
    ]
    
    todos_ok = True
    for dep in dependencias:
        try:
            importlib.import_module(dep)
            print(f"‚úÖ {dep}")
        except ImportError:
            print(f"‚ùå {dep} - NO INSTALADO")
            todos_ok = False
    
    return todos_ok

def verificar_configuracion_segura():
    """Verifica la configuraci√≥n de seguridad"""
    print("\nüõ°Ô∏è  VERIFICANDO CONFIGURACI√ìN DE SEGURIDAD:")
    
    try:
        from config_seguro import CONFIGURACION_SEGURA, validar_configuracion_segura
        
        # Verificar configuraci√≥n
        if validar_configuracion_segura():
            print("‚úÖ Configuraci√≥n de seguridad OK")
            
            # Verificar valores clave
            if CONFIGURACION_SEGURA['DEMO_MODE']:
                print("‚úÖ DEMO_MODE activado")
            else:
                print("‚ùå DEMO_MODE desactivado - PELIGRO")
                return False
            
            if CONFIGURACION_SEGURA['PAPER_TRADING']:
                print("‚úÖ PAPER_TRADING activado")
            else:
                print("‚ùå PAPER_TRADING desactivado - PELIGRO")
                return False
            
            if CONFIGURACION_SEGURA['RIESGO_MAXIMO_POR_TRADE'] <= 1.0:
                print(f"‚úÖ Riesgo por trade: {CONFIGURACION_SEGURA['RIESGO_MAXIMO_POR_TRADE']}%")
            else:
                print(f"‚ùå Riesgo por trade muy alto: {CONFIGURACION_SEGURA['RIESGO_MAXIMO_POR_TRADE']}%")
                return False
            
            return True
        else:
            print("‚ùå Configuraci√≥n de seguridad FALL√ì")
            return False
            
    except ImportError:
        print("‚ùå No se pudo cargar config_seguro.py")
        return False

def verificar_optimizacion():
    """Verifica archivos de optimizaci√≥n"""
    print("\nüéØ VERIFICANDO SISTEMA DE OPTIMIZACI√ìN:")
    
    archivos_optimizacion = [
        'advanced_auto_optimizer.py',
        'bayesian_optimizer.py', 
        'master_optimization_system.py',
        'implement_optimized_strategy.py'
    ]
    
    todos_ok = True
    for archivo in archivos_optimizacion:
        if os.path.exists(archivo):
            print(f"‚úÖ {archivo}")
        else:
            print(f"‚ùå {archivo} - FALTANTE")
            todos_ok = False
    
    return todos_ok

def verificar_resultados_previos():
    """Verifica si hay resultados de optimizaci√≥n"""
    print("\nüìä VERIFICANDO RESULTADOS PREVIOS:")
    
    # Buscar archivos de resultados
    archivos_resultados = []
    for archivo in os.listdir('.'):
        if any(x in archivo for x in ['results', 'strategy', 'backtest']) and archivo.endswith(('.json', '.csv')):
            archivos_resultados.append(archivo)
    
    if archivos_resultados:
        print(f"‚úÖ Encontrados {len(archivos_resultados)} archivos de resultados:")
        for archivo in archivos_resultados[:5]:  # Mostrar solo los primeros 5
            print(f"  ‚Ä¢ {archivo}")
        if len(archivos_resultados) > 5:
            print(f"  ‚Ä¢ ... y {len(archivos_resultados) - 5} m√°s")
    else:
        print("‚ÑπÔ∏è  No hay resultados previos (normal en primera ejecuci√≥n)")
    
    return True

def verificar_permisos():
    """Verifica permisos de archivos"""
    print("\nüîê VERIFICANDO PERMISOS:")
    
    archivos_ejecutables = [
        'config_seguro.py',
        'iniciar_bot_seguro.py',
        'configurar_credenciales.py',
        'deploy_a_vps.py'
    ]
    
    todos_ok = True
    for archivo in archivos_ejecutables:
        if os.path.exists(archivo):
            if os.access(archivo, os.X_OK):
                print(f"‚úÖ {archivo} - Ejecutable")
            else:
                print(f"‚ö†Ô∏è  {archivo} - No ejecutable (chmod +x requerido)")
                todos_ok = False
        else:
            print(f"‚ùå {archivo} - No encontrado")
            todos_ok = False
    
    return todos_ok

def mostrar_estado_mercado():
    """Muestra el estado del mercado"""
    print("\nüìà ESTADO DEL MERCADO:")
    
    now = datetime.now()
    dia_semana = now.weekday()  # 0=Lunes, 6=Domingo
    
    if dia_semana < 5:  # Lunes a Viernes
        print(f"‚úÖ Mercado Forex: ABIERTO")
        print(f"üìÖ D√≠a: {['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes'][dia_semana]}")
    else:
        print(f"‚ùå Mercado Forex: CERRADO (fin de semana)")
        print(f"üìÖ D√≠a: {['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo'][dia_semana]}")
    
    print(f"üïê Hora local: {now.strftime('%H:%M:%S')}")

def mostrar_resumen_final(resultados):
    """Muestra el resumen final"""
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE VERIFICACI√ìN")
    print("=" * 60)
    
    total_checks = len(resultados)
    passed_checks = sum(resultados.values())
    
    for nombre, resultado in resultados.items():
        emoji = "‚úÖ" if resultado else "‚ùå"
        print(f"{emoji} {nombre}")
    
    print("\n" + "-" * 60)
    print(f"üìä RESULTADO: {passed_checks}/{total_checks} verificaciones pasadas")
    
    if passed_checks == total_checks:
        print("üéâ ¬°SISTEMA COMPLETAMENTE VERIFICADO!")
        print("üöÄ Listo para ejecutar el bot")
        print("\nüí° SIGUIENTE PASO:")
        print("   python3 configurar_credenciales.py")
        return True
    else:
        print("‚ö†Ô∏è  Algunas verificaciones fallaron")
        print("üîß Revisa los errores arriba antes de continuar")
        return False

def main():
    """Funci√≥n principal"""
    try:
        imprimir_banner()
        
        # Ejecutar todas las verificaciones
        resultados = {
            "Archivos principales": verificar_archivos_principales(),
            "Directorio src": verificar_directorio_src(), 
            "Dependencias Python": verificar_dependencias(),
            "Configuraci√≥n segura": verificar_configuracion_segura(),
            "Sistema optimizaci√≥n": verificar_optimizacion(),
            "Resultados previos": verificar_resultados_previos(),
            "Permisos archivos": verificar_permisos()
        }
        
        # Mostrar estado del mercado
        mostrar_estado_mercado()
        
        # Resumen final
        sistema_ok = mostrar_resumen_final(resultados)
        
        if sistema_ok:
            sys.exit(0)
        else:
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\nüëã Verificaci√≥n interrumpida")
    except Exception as e:
        print(f"\n‚ùå Error durante verificaci√≥n: {e}")

if __name__ == "__main__":
    main() 