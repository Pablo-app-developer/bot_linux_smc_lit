#!/usr/bin/env python3
# Activar Trading Real SMC-LIT
# ===========================

import os
import json
import paramiko
import sqlite3
from datetime import datetime

class RealTradingActivator:
    """Activar trading real en lugar de demo"""
    
    def __init__(self):
        print("üöÄ ACTIVANDO TRADING REAL SMC-LIT")
        print("=" * 50)
        print("‚ö†Ô∏è  ADVERTENCIA: Esto activar√° operaciones reales con dinero real")
        print("üí∞ Se utilizar√° tu cuenta de $3000 USD")
        
    def get_real_credentials(self):
        """Obtener credenciales de cuenta real"""
        print("\nüìã CONFIGURACI√ìN DE CUENTA REAL:")
        print("=" * 40)
        
        # Tus credenciales reales (las que usas en MT5 m√≥vil)
        real_account = {
            'login': input("üîê Login de cuenta real (ej: 164675960): ").strip(),
            'password': input("üîë Password de cuenta real: ").strip(),
            'server': input("üè¶ Servidor (ej: MetaQuotes-Demo): ").strip() or "MetaQuotes-Demo",
        }
        
        # Validar que no est√© vac√≠o
        if not all(real_account.values()):
            print("‚ùå Todos los campos son obligatorios")
            return None
            
        print(f"\n‚úÖ Credenciales configuradas:")
        print(f"   Login: {real_account['login']}")
        print(f"   Servidor: {real_account['server']}")
        print(f"   Password: {'*' * len(real_account['password'])}")
        
        confirm = input("\n‚ùì ¬øConfirmas que estas son tus credenciales REALES? (si/no): ").lower()
        if confirm != 'si':
            print("‚ùå Configuraci√≥n cancelada")
            return None
            
        return real_account
    
    def update_local_config(self, credentials):
        """Actualizar configuraci√≥n local"""
        print("\nüñ•Ô∏è  ACTUALIZANDO CONFIGURACI√ìN LOCAL...")
        
        # Archivos a actualizar
        config_files = [
            'unified_trading_bot.py',
            'main_advanced_with_indices.py',
            'main_unlimited_v2.py',
            'start_vps_bot_real.py'
        ]
        
        updates_made = 0
        
        for file_path in config_files:
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'r') as f:
                        content = f.read()
                    
                    # Actualizar credenciales demo a reales
                    original_content = content
                    
                    # Reemplazar credenciales demo
                    content = content.replace("'mt5_login': '5036791117'", f"'mt5_login': '{credentials['login']}'")
                    content = content.replace("'mt5_password': 'BtUvF-X8'", f"'mt5_password': '{credentials['password']}'")
                    content = content.replace("'mt5_server': 'MetaQuotes-Demo'", f"'mt5_server': '{credentials['server']}'")
                    
                    # Activar modo real
                    content = content.replace("'demo_mode': True", "'demo_mode': False")
                    content = content.replace("'mode': 'DEMO'", "'mode': 'REAL'")
                    content = content.replace("'trading_mode': 'demo'", "'trading_mode': 'real'")
                    
                    # Guardar si hubo cambios
                    if content != original_content:
                        # Hacer backup
                        backup_file = f"{file_path}.backup_real_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                        with open(backup_file, 'w') as f:
                            f.write(original_content)
                        
                        # Guardar cambios
                        with open(file_path, 'w') as f:
                            f.write(content)
                        
                        print(f"‚úÖ {file_path} actualizado (backup: {backup_file})")
                        updates_made += 1
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è  Error actualizando {file_path}: {e}")
        
        print(f"‚úÖ {updates_made} archivos actualizados localmente")
        return updates_made > 0
    
    def update_vps_config(self, credentials):
        """Actualizar configuraci√≥n en VPS"""
        print("\nüåê ACTUALIZANDO CONFIGURACI√ìN VPS...")
        
        try:
            # Conectar al VPS
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect('107.174.133.202', username='root', password='n5X5dB6xPLJj06qr4C', timeout=30)
            
            # Detener bot actual
            print("üõë Deteniendo bot VPS actual...")
            ssh.exec_command("pkill -f unified_trading_bot.py")
            
            # Actualizar archivos en VPS
            update_commands = [
                f"cd /home/smc-lit-bot",
                f"cp unified_trading_bot.py unified_trading_bot.py.backup_real_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                f"sed -i \"s/'mt5_login': '5036791117'/'mt5_login': '{credentials['login']}'/g\" unified_trading_bot.py",
                f"sed -i \"s/'mt5_password': 'BtUvF-X8'/'mt5_password': '{credentials['password']}'/g\" unified_trading_bot.py",
                f"sed -i \"s/'mt5_server': 'MetaQuotes-Demo'/'mt5_server': '{credentials['server']}'/g\" unified_trading_bot.py",
                f"sed -i \"s/'demo_mode': True/'demo_mode': False/g\" unified_trading_bot.py",
                f"sed -i \"s/'mode': 'DEMO'/'mode': 'REAL'/g\" unified_trading_bot.py"
            ]
            
            for cmd in update_commands:
                stdin, stdout, stderr = ssh.exec_command(cmd)
                stderr_output = stderr.read().decode()
                if stderr_output and "No such file" not in stderr_output:
                    print(f"‚ö†Ô∏è  Warning: {stderr_output}")
            
            print("‚úÖ Configuraci√≥n VPS actualizada")
            
            # Reiniciar bot con configuraci√≥n real
            print("üöÄ Reiniciando bot VPS en modo REAL...")
            ssh.exec_command("cd /home/smc-lit-bot && nohup python3 unified_trading_bot.py > real_trading.log 2>&1 &")
            
            ssh.close()
            print("‚úÖ Bot VPS reiniciado en modo REAL")
            return True
            
        except Exception as e:
            print(f"‚ùå Error actualizando VPS: {e}")
            return False
    
    def create_real_trading_db(self):
        """Crear base de datos para trading real"""
        print("\nüíæ CONFIGURANDO BASE DE DATOS REAL...")
        
        try:
            # Base de datos para operaciones reales
            conn = sqlite3.connect('real_trading_history.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS real_trades (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    symbol TEXT NOT NULL,
                    type TEXT NOT NULL,
                    entry_price REAL,
                    exit_price REAL,
                    lot_size REAL DEFAULT 0.01,
                    profit REAL DEFAULT 0,
                    status TEXT DEFAULT 'open',
                    timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
                    signal_score REAL,
                    trade_id TEXT UNIQUE,
                    mode TEXT DEFAULT 'REAL',
                    account_balance REAL,
                    equity REAL,
                    margin REAL,
                    free_margin REAL
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS real_account_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
                    balance REAL,
                    equity REAL,
                    profit REAL,
                    margin REAL,
                    free_margin REAL,
                    margin_level REAL
                )
            ''')
            
            conn.commit()
            conn.close()
            
            print("‚úÖ Base de datos real configurada")
            return True
            
        except Exception as e:
            print(f"‚ùå Error configurando DB real: {e}")
            return False
    
    def test_real_connection(self, credentials):
        """Probar conexi√≥n con cuenta real"""
        print("\nüî¨ PROBANDO CONEXI√ìN REAL...")
        
        try:
            # Intentar conexi√≥n MT5 real
            import MetaTrader5 as mt5
            
            if not mt5.initialize():
                print("‚ùå Error inicializando MT5")
                return False
            
            # Intentar login con credenciales reales
            login_result = mt5.login(
                login=int(credentials['login']),
                password=credentials['password'],
                server=credentials['server']
            )
            
            if not login_result:
                error = mt5.last_error()
                print(f"‚ùå Error en login real: {error}")
                mt5.shutdown()
                return False
            
            # Obtener info de cuenta
            account_info = mt5.account_info()
            if account_info is None:
                print("‚ùå No se pudo obtener info de cuenta")
                mt5.shutdown()
                return False
            
            print("‚úÖ CONEXI√ìN REAL EXITOSA!")
            print(f"üí∞ Balance: ${account_info.balance:.2f}")
            print(f"üíé Equity: ${account_info.equity:.2f}")
            print(f"üè¶ Servidor: {account_info.server}")
            print(f"üÜî Login: {account_info.login}")
            print(f"üí± Moneda: {account_info.currency}")
            print(f"üìä Leverage: 1:{account_info.leverage}")
            
            mt5.shutdown()
            return True
            
        except ImportError:
            print("‚ö†Ô∏è  MT5 no disponible en este sistema, pero configuraci√≥n guardada")
            return True
        except Exception as e:
            print(f"‚ùå Error probando conexi√≥n: {e}")
            return False
    
    def activate_real_trading(self):
        """Proceso completo de activaci√≥n"""
        print("\nüéØ INICIANDO ACTIVACI√ìN DE TRADING REAL")
        
        # 1. Obtener credenciales
        credentials = self.get_real_credentials()
        if not credentials:
            return False
        
        # 2. Probar conexi√≥n
        if not self.test_real_connection(credentials):
            print("‚ùå No se pudo establecer conexi√≥n real")
            return False
        
        # 3. Actualizar configuraci√≥n local
        if not self.update_local_config(credentials):
            print("‚ùå Error actualizando configuraci√≥n local")
            return False
        
        # 4. Crear base de datos real
        if not self.create_real_trading_db():
            print("‚ùå Error configurando base de datos")
            return False
        
        # 5. Actualizar VPS
        vps_updated = self.update_vps_config(credentials)
        
        # 6. Resumen final
        print("\n" + "=" * 50)
        print("üéâ TRADING REAL ACTIVADO!")
        print("=" * 50)
        print("‚úÖ Configuraci√≥n local actualizada")
        print("‚úÖ Base de datos real configurada")
        print("‚úÖ Conexi√≥n MT5 real verificada")
        
        if vps_updated:
            print("‚úÖ VPS actualizado y reiniciado")
        else:
            print("‚ö†Ô∏è  VPS requiere actualizaci√≥n manual")
        
        print(f"\nüí∞ CUENTA REAL ACTIVA:")
        print(f"   Login: {credentials['login']}")
        print(f"   Servidor: {credentials['server']}")
        print(f"   Modo: REAL TRADING")
        
        print(f"\n‚ö†Ô∏è  IMPORTANTE:")
        print(f"   - El bot ahora operar√° con dinero REAL")
        print(f"   - Monitorea las operaciones constantemente")
        print(f"   - Puedes ver el progreso en: http://localhost:5003")
        print(f"   - Los logs est√°n en: real_trading.log")
        
        return True

def main():
    """Funci√≥n principal"""
    activator = RealTradingActivator()
    
    confirm = input("\n‚ùì ¬øEst√°s seguro de activar TRADING REAL? (si/no): ").lower()
    if confirm != 'si':
        print("‚ùå Activaci√≥n cancelada")
        return
    
    if activator.activate_real_trading():
        print("\nüöÄ ¬°Trading real activado exitosamente!")
        print("üí∞ El bot ahora operar√° con tu cuenta de $3000 USD")
    else:
        print("\n‚ùå Error activando trading real")

if __name__ == "__main__":
    main() 